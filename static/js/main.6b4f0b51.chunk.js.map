{"version":3,"sources":["Components/Button.jsx","Components/SingleCard.jsx","Components/Modal.jsx","App.js","index.js"],"names":["Button","onClick","children","className","SingleCard","card","handleChoice","flipped","disabled","src","alt","Modal","shuffleCards","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","pairs","setPairs","counter","setCounter","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","prevTurns","timer","setInterval","clearInterval","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b4f0b51.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Button({onClick, children, className}) {\n  return (\n    <button onClick={onClick} className={className}>\n      {children}\n    </button>\n  )\n}\n","import React from \"react\";\n\nexport default function SingleCard({card, handleChoice, flipped, disabled}) {\n\n  const handleClick = () => {\n    if (!disabled) {\n      handleChoice(card)\n    }\n  }\n\n  return (\n    <div className=\"card\">\n      <div className={flipped ? 'flipped' : ''}>\n        <img className=\"front\" src={card.src} alt=\"card front\" />\n        <img \n          className=\"back\" \n          src=\"./img/cover.png\" \n          onClick={handleClick}\n          alt=\"card back\" />\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\nimport Button from './Button'\n\nexport default function Modal({shuffleCards, children}) {\n  return (\n    <div className='modal'>\n      <div className=\"modal-content\">\n        <h2>{children}</h2>\n        <Button onClick={shuffleCards} className='playagain-btn'>Play again</Button>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"./Components/Button\";\nimport SingleCard from \"./Components/SingleCard\";\nimport Modal from \"./Components/Modal\";\n\nconst cardImages = [\n  { src: \"./img/pokemon1.png\", matched: false },\n  { src: \"./img/pokemon2.png\", matched: false },\n  { src: \"./img/pokemon3.png\", matched: false },\n  { src: \"./img/pokemon4.png\", matched: false },\n  { src: \"./img/pokemon5.png\", matched: false },\n  { src: \"./img/pokemon6.png\", matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [pairs, setPairs] = useState(0);\n  const [counter, setCounter] = useState(1000);\n\n  //shuffle card - dubble amount of cards from cardImages\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n    setPairs(0);\n    setCounter(1000);\n  };\n\n  //handle choice\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  //compare choices\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setPairs(pairs + 1);\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo, pairs]);\n\n  //reset & increase turn\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns((prevTurns) => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  //start a new game automatically\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n\n  useEffect(() => {\n    const timer =\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n    return () => clearInterval(timer);\n  }, [counter]);\n\n  return (\n    <>\n      <header>\n        <h1>Poke Match</h1>\n        <h4>Memory game</h4>\n      </header>\n\n      <main>\n        <div className=\"game\">\n          <div className=\"data\">\n            <p>Turns: {turns}</p>\n            <p>Counter: {counter}</p>\n            <p>\n              Pairs: {pairs}/{cardImages.length}\n            </p>\n          </div>\n          <div className=\"card-grid\">\n            {cards.map((card) => (\n              <SingleCard\n                key={card.id}\n                card={card}\n                handleChoice={handleChoice}\n                flipped={\n                  card === choiceOne || card === choiceTwo || card.matched\n                }\n                disabled={disabled}\n              />\n            ))}\n          </div>\n          <Button onClick={shuffleCards} className=\"reset-btn\">\n            Reset\n          </Button>\n        </div>\n      </main>\n      {pairs === cardImages.length ? (\n        <Modal shuffleCards={shuffleCards}>Congratulations!</Modal>\n      ) : (\n        \"\"\n      )}\n      {counter === 0 ? (\n        <Modal shuffleCards={shuffleCards}>Time is up!</Modal>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}